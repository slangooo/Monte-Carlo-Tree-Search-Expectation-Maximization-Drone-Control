numDroneResults ={};
numberOfDrones = [5];
for(numOfDrones= 1:length(numberOfDrones))
sinr_thresholds = [0];
trialsNum = 1000;
parameters = struct('a',9.61,...
    'b',0.16,...
    'carrFreq',2e9,...
    'avgLossLOS',1,...
    'avgLossNLOS',20,...
    'totalBandwidth',20e6,...
    'requiredRate',1e6,...
    'spectralEfficiency',2,...
    'noisePower',-140,...
    'sinr_threshold',sinr_thresholds(1),...
    'linkReliabilityThreshold', 0.95,...
    'dronePower',500,...
    'numberOfDrones',numberOfDrones(numOfDrones),...
    'mctsStep',-100,...
    'maxIterMcts',20,...
    'mctsUpdateInterval',5,...
    'visitsDivisor',1.2,...
    'childVisistsThreshold',0);

results = {[],[],[],[]};

for (idx=1:length(sinr_thresholds))
    
    params = parameters
    params.sinr_threshold = sinr_thresholds(idx);
    time_step = 0.5;%(s)
%     vars = {'s_mobility_group', 's_mobility'};
%         clear(vars{:});
        s_input = struct('V_POSITION_X_INTERVAL',[0 500],...%(m)
            'V_POSITION_Y_INTERVAL',[0 500],...%(m)
            'V_SPEED_INTERVAL',[0.8 1.4],...%(m/s)
            'V_PAUSE_INTERVAL',[0 1],...%pause time (s)
            'V_WALK_INTERVAL',[2.00 6.00],...%walk time (s)
            'V_DIRECTION_INTERVAL',[0 360],...%(degrees)
            'SIMULATION_TIME',121,...%(s)
            'NB_NODES',200,...
            'MEMBERS_NB_INTERVAL', [0],...
            'MEMBERS_WALK_INTERVAL', [1 3],...
            'SDR', 20,...  %speed member deviation ratio
            'ADR',1); %angle member devation ratio
        
        
        s_mobility = Generate_Leaders_Mobility(s_input);
        if s_input.MEMBERS_NB_INTERVAL[0] > 0
            s_mobility_group = Generate_Members_Mobility_Synchronous(s_input,s_mobility);
        else
            s_mobility_group = [];
        end
        
    [numberOfServedUsersPerIterationRandom, energyEfficiencyPerIterationRandom,...
        numberOfStatesVisitedMcts, reliabilitiesPerIterationMcts,...
        energyEfficiencyPerIteration, spectralEfficiencyPerIteration,...
        numberOfServedUsersPerIteration, averageDronePower,...
        minDistanceBetweenDronesPerIteration] = simulate_mcts_time...
        (s_mobility,s_input,time_step,s_mobility_group, params);
    results{idx} = {numberOfServedUsersPerIterationRandom, energyEfficiencyPerIterationRandom,...
        numberOfStatesVisitedMcts, reliabilitiesPerIterationMcts,...
        energyEfficiencyPerIteration, spectralEfficiencyPerIteration,...
        numberOfServedUsersPerIteration, averageDronePower,...
        minDistanceBetweenDronesPerIteration};
    s_mobility = [];
end





for sinr_threshold_index=1:length(sinr_thresholds)
    params = parameters;
    params.sinr_threshold = sinr_thresholds(sinr_threshold_index);
    for trialIndex =2:trialsNum
%         vars = {'s_mobility_group', 's_mobility'};
%         clear(vars{:});
        s_mobility = Generate_Leaders_Mobility(s_input);
        if s_input.MEMBERS_NB_INTERVAL[0] > 0
            s_mobility_group = Generate_Members_Mobility_Synchronous(s_input,s_mobility);
        else
            s_mobility_group = [];
        end
        
        time_step = 0.5;%(s)
        [numberOfServedUsersPerIterationRandom, energyEfficiencyPerIterationRandom,...
            numberOfStatesVisitedMcts, reliabilitiesPerIterationMcts,...
            energyEfficiencyPerIteration, spectralEfficiencyPerIteration,...
            numberOfServedUsersPerIteration, averageDronePower,...
            minDistanceBetweenDronesPerIteration] = simulate_mcts_time...
            (s_mobility,s_input,time_step,s_mobility_group, params);
        
        trial_results = {numberOfServedUsersPerIterationRandom, energyEfficiencyPerIterationRandom,...
            numberOfStatesVisitedMcts, reliabilitiesPerIterationMcts,...
            energyEfficiencyPerIteration, spectralEfficiencyPerIteration,...
            numberOfServedUsersPerIteration, averageDronePower,...
            minDistanceBetweenDronesPerIteration};
        
        for ii=1:length(results{sinr_threshold_index})-1
            results{sinr_threshold_index}{ii} = results{sinr_threshold_index}{ii} +...
                (trial_results{ii}-results{sinr_threshold_index}{ii})./trialIndex;
        end
        
        results{sinr_threshold_index}{ii+1} = min(trial_results{ii+1},results{sinr_threshold_index}{ii+1});
        s_mobility = [];
    end
end
numDroneResults{numOfDrones} = results;
end
save('simulation_results_all');